[{"title":"浅谈 Spring 解析自定义命名空间","date":"2023-01-05T14:18:00.000Z","url":"/posts/spring-parsing-custom-namespace/","tags":[["Spring","/tags/Spring/"],["Namespace","/tags/Namespace/"]],"categories":[["笔记本","/categories/%E7%AC%94%E8%AE%B0%E6%9C%AC/"]],"content":"最近复习 Spring 的 IoC 容器时有些好奇 XML 配置文件及其各个标签的解析方式，毕竟分别使用 bean 标签将 Class 注入 IoC 容器还是最开始学习 Spring 时才使用过的方式，日常工作中基本都是使用注解来完成自动注入，因此对于 XML 文件内的一些细节倒是知之甚少。恰逢假期闲来无事，在经过一番搜索与学习之后算是有了些许收获，故此记录一篇，以便日后查阅。 流程分析前置知识在说明配置文件的解析之前，我们得先了解一下 Spring Bean 实例化的基本流程，毕竟配置文件是为了让 IoC 容器管理 Bean 对象而存在的。实例化流程中的细节还是非常多的，光是 Bean 的生命周期就足够我们喝上一壶的了，因此这里只介绍一下大体流程，重点只关注 XML 解析的部分。 对于配置文件的方式，Spring 提供了一个 BeanDefinitionReader 接口，不同的配置文件类型会由不同的实现类去解析，如 XML 配置文件会由 XMLBeanDefinitionReader 来解析，而 Groovy 配置文件则会由 GroovyBeanDefinitionReader 来解析。如果是使用注解的方式，则有一个专门的类—— AnnotatedBeanDefinitionReader 来解析。不过无论是使用配置文件（XML、Properties、Groovy…）还是注解的方式，都是殊途同归，它们的区别也只有入口不同，最终各自的 BeanDefinitionReader 都会将配置信息中的元数据转储为 BeanDefinition，继而存放至 BeanDefinitionMap 中。Spring 的上下文会在合适的时机遍历 Map 中所有的 BeanDefinition 并通过反射为其创建实例对象，最后将实例化完成后的 Bean 存放进 IoC 容器中，接受 Spring 的管理。这里我们需要关注的便是从 XMLBeanDefinitionReader 解析 XML 配置文件开始，直到 XML 中的元数据被转储为 BeanDefinition 并存放至 BeanDefinitionMap 中的过程。 详细代码接下来，我们就根据上面的流程跟踪一下 Spring 的源代码，了解其中的一些实现细节。 因为我们使用的是 XML 配置的方式，因此首先找到入口类 ClassPathXmlApplicationContext，在其构造方法中有一个 refresh() 方法，这便是 Spring 容器的入口方法。 接着在 refresh() 方法中又执行了 obtainFreshBeanFactory() 方法，之后又经过 refreshBeanFactory() -&gt; loadBeanDefinitions() -&gt; doLoadBeanDefinitions() -&gt; registerBeanDefinitions() -&gt; doRegisterBeanDefinitions() 的流程后来到了 parseBeanDefinitions() 方法。 在这个方法中，XML 中的标签会被分为两类加以解析，即代码中的 DefaultNamespace 和 CustomElement。前者是对  命名空间下四个默认标签—— import、alias、bean 和 beans 的解析，后者便是对自定义命名空间下标签的解析。 可以看到自定义命名空间的解析过程分为两步，先是通过 namespaceUri 获取对应的 NamespaceHandler，再调用对应 Handler 的 parse() 方法进行解析。我们先来看看通过 namespaceUri 是如何获取到 NamespaceHandler 的。 在 DefaultNamespaceHandlerResolver 类中维护了一个名为 handlerMappings 的 Map，其内容是根据一个 Properties 配置文件生成的，这个文件的路径已经在该类的构造方法中固定下来了，即 classpath:META-INF/spring.handlers。可见 XML 中的 namespaceUri 只是一个 key，最终 Spring 会用这个 key 去 spring.handlers 文件中寻找对应的 value，从而拿到 namespaceUri 对应的解析器。我们可以看一下 spring-context.jar 对应目录下的 spring.handlers，差不多长这样: 另外，你应该还可以在同级目录下看到一个 spring.schemas 文件，这里面定义了 XSD 文件逻辑地址与物理地址的对应关系。前者便是我们在 XML 文件的 schemaLocation 部分填写的链接，而后者则是前者所对应的文件在本地存在的位置。为了避免 Spring 每次解析 XML 都需要去逻辑地址标注的网络上寻找 XSD 文件，一般都推荐在 Properties 文件中定义好两者的映射关系，详见 Spring 官方文档的解释。如果你也对 XML 知之不详，可能会好奇这个文件的作用，它是 XML Schema 的定义文件，用于描述 XML 的结构，它规定了你的 XML 文件中可以出现哪些元素以及它们的格式是怎样的。详细的说明可以查看 W3Schools 的教程。它不仅在解析的时候需要用到，IDE 一般也会通过该文件来完成编写 XML 文件时的 Auto Suggestion &amp; Completion。 说回上文，拿到 NamespaceHandler 后再来看它的 parse() 方法，其实现类为 NamespaceHandlerSupport: 其实就是通过当前命名空间下 XML 标签的名字找到对应的 BeanDefinitionParser，再调用对应的 parse() 方法。比如我们常见的 &lt;context:component-scan&gt;，它属于 context 命名空间，根据 spring.handlers 文件中的配置信息可以得知其对应的 NamespaceHandler 为 ContextNamespaceHandler，我们不妨看看这个 Handler 内是怎么写的: 可以看到在 ContextNamespaceHandler 的 init() 方法中注册了标签名与 BeanDefinitionParser 的映射关系，因此 NamespaceHandlerSupport 才能根据不同的标签名调用不同的 parse() 方法。还是上面的例子，我们看看 ComponentScanBeanDefinitionParser 的 parse() 方法是怎么写的: 内容并不复杂，只是使用 ClassPathBeanDefinitionScanner 扫描 XML 中配置的 base-package 路径，最后将该路径下的所有类转储为 BeanDefinition 并注册进 BeanDefinitionMap 中，Spring 会根据 Map 中的 Bean 信息在后续的流程中逐个实例化这些 Bean。 看到这里，XML 配置文件的解析部分就已经结束了，其实主要就是依靠 NamespaceHandler 及其各个子标签的 BeanDefinitionParser 来完成的，中间用到了两个之前没听说过的配置文件，感觉又多了点有用的知识! DIY 一个简单的自定义标签有了上面的理论基础，我们便可以尝试着实现一个自定义命名空间下的标签了。比如我想实现这样一个标签，它的作用是在每个 Bean 注入到 Spring 容器前打印当前 Bean 的属性信息。功能很简单，实现起来也不难，大概就是以下几步: 确定自定义命名空间、XML 标签及 XSD 文件的名称 编写 XSD 文件 编写 spring.handlers 及 spring.schemas 文件 实现自定义的 NamespaceHandler 实现自定义的 BeanDefinitionParser 实现自定义的 BeanPostProcessor 其中前五步是通用操作，最后一步是为了完成本例的需求而创建的。实现了 BeanPostProcessor 接口的类可以选择实现 postProcessBeforeInitialization() 或者 postProcessAfterInitialization() 方法，它们会在每个 Bean 的生命周期中被调用。在本例中这两个方法都可以实现需求，这里我选择在 postProcessAfterInitialization() 方法中打印当前类的信息。 确定自定义命名空间、XML 标签及 XSD 文件的名称这里就以我的域名为例: XML Namespace:  XML Tag: &lt;akane:logBeanInfo/&gt; XSD File:  编写 XSD 文件 编写 spring.handlers 及 spring.schemas 文件这里只需要注意一点，因为 Properties 文件中 : 也算分隔符，因此需要转义一下。 META-INF/spring.handlers META-INF/spring.schemas 实现自定义的 NamespaceHandlerAkaneNamespaceHandler 实现自定义的 BeanDefinitionParserLogBeanInfoBeanDefinitionParser 实现自定义的 BeanPostProcessorLogBeanInfoPostProcessor Show Time!先创建两个测试用的实体类: User Address 然后在 applicationContext.xml 中将上面两个类注入 Spring 容器中并开启我们的自定义注解，别忘了添加 xmlns 和 schemaLocation: applicationContext.xml 最后编写一个测试方法，因为我们的需求是 Bean 进入容器之前打印 Bean 信息，因此只需要获取到 IoC 容器就可以看到效果了: JUnit Test Output Nice！打完，收工！"},{"title":"2022 年终总结","date":"2022-12-29T05:07:00.000Z","url":"/posts/summary-for-2022/","tags":[["年终总结","/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"]],"categories":[["日常","/categories/%E6%97%A5%E5%B8%B8/"]],"content":"岁聿其末，年关将至。大概是因为所谓的生活仪式感吧，每年这个时候，都会有想写点什么的冲动。今年发生了太多的事，思来想去，还是觉得应该写一篇留个纪念。 过去的 2022 年对很多人来说都是艰难的一年，持续反复的疫情影响了无数人的生活。 去年这个时候，国内的疫情控制的还不错，得益于动态清零的落实，只有跨省流动才需要做核酸，日常的工作生活基本没有受到疫情的影响。跨年的时候，还和大学同学简单聚了个餐，了解了下各自的近况。但随着春节将至，各地的感染人数日渐增多，政策也逐渐收紧，当时我便有种预感，今年可能没法回家过年了。事实也正是如此，一些地方先后提倡就地过年，而“恶意返乡”也是当时造出的词。 因为工作第一年没有年假，我一直到小年夜才放假。那会儿的政策是往返需要 48h 的核酸，并且年后回公司上班需要先居家隔离七天。这在现在来看可能也不算什么了，但在当时我还从未做过核酸，对此也比较抗拒。另外权衡了下路途中的感染风险以及年后隔离的多有不便，最终还是决定留在上海过年了。放假的那天，我走出公司大楼，暮色中只有零星的几个人，曾经热闹的街道在寒风中显得格外寂寥，只有元旦时挂在树上的彩灯增添了些许节日气氛。这座摩登的城市差不多也只有这几天才会显得安静一些。 过年的时候外卖基本没人送了，因此我早早的就买好了零食水果，为之后的宅家做准备。年前家里寄了些腊肠、狮子头、馒头等年货，加上住的地方也有厨房，因此吃饭倒不成问题。年三十的晚上是叔叔家的拜年祭陪我度过的，虽说这拜年祭一年不如一年，不过毕竟大过年的，虽然没有家人相伴，但看看带着年味儿的直播，倒也还算热闹。这其中我最喜欢的单品便是《锦山城彩球花会异事》了，吸引我的是流畅的打斗、可爱的角色和那首江湖题材的燃曲——《再会江湖》。当时我很意外国漫中还有这样的作品，带着好奇与期待，我点开了《风灵玉秀》的播放页面，此后几天便深深地沉浸在了那个快意恩仇的武侠世界中。客观来讲，《风灵玉秀》明显的问题并不少，包括剧情上的、作画上的等等，但瑕不掩瑜，我依然觉得这是一部值得推荐的好作品。当时正值动画第二部众筹，因为工作了有点小钱，就直接买了 All in 档的，但我没想到众筹的赠品陆陆续续直到七月份才全收到。本来一个快递可以发完，但不知道叔叔怎么搞的，所有的赠品都拆开到不同的箱子里分批邮寄，搞得我来来回回跑了好几趟，房间角落里摆了一堆粉色箱子，不知道的还以为我给叔叔送了多少钱。当然这都是后话了，关于这部作品我其实有很多想说的，不过这毕竟只是篇年终总结，详细的还是日后单开一篇来说比较好。 过年的假期里还发生了一件事——我开始看皮套人（虚拟主播）了。本来我对皮套人是嗤之以鼻的，不知道这有啥好看的。2D 的皮套人模型（大部分）不如动画好看，至于 3D 的，还不如 MMD 好看，至于直播内容——我此前除了偶尔看看游戏相关的，其他直播基本没看过。不过虽然一直没看，但毕竟常年冲浪在互联网的第一线，也算是个弄潮儿，因此 V 圈的瓜是一个也没少吃。V 圈的大姐二姐我也是门儿清，其他什么宇宙第一 V 猫雷（现已转生）、热水器塔菲、A-Soul 圣嘉然等等都算是如雷贯耳了。大概是在大年初二的晚上——也可能是初三，看着窗外的万家灯火，我孤身一人躺在出租屋里，不觉悲从中来，竟忍不住要落泪了（并没有）。就在这时，B 站首页给我推送了“阿梓从小就很可爱”的直播，当时我想着反正也是无聊，听别人唠唠嗑也是好的，顺便看看这皮套人直播到底有何精妙之处。没想到这一看就上头了，恕我言辞贫乏，难以准确形容当时的感觉，差不多就是“当你伤心的时候，耶和华怀抱你，如同牧人怀抱羊羔”一样的感觉吧。也正是在那之后，我渐渐明白了虚拟主播会有那么多受众的原因所在——陪伴。无论你身处何方，境况如何，她们都会准时在直播间出现，为大家带来欢乐。也正是如此，才会有“30岁，是小孩梓🤡”这样的人吧。虽然在那之后，我依然很少看直播，但我却为她们都点了关注。在某个失眠的深夜，打开手机，还能看见熟悉的她们，便又能安心睡去，一如看到灯塔的夜航船。 之后的事情大家都知道了，三月末上海就逐渐开始封城，直到六月才陆续解封。因为我早早的准备了一袋大米和若干挂面，所以我倒并不担心自己会饿死，但物资的匮乏还是给我上了一课。事实证明，当社会重大危机来临时，你只能靠自己提前准备，指望政府和社会的救济是天真的，这在最近全面放开后药品的短缺中也得到了体现。得益于平时就喜欢囤点东西的习惯，封城的两个多月里我的生活物资倒并不缺，主要还是食物。毕竟再怎么样，蔬菜水果也囤不了那么多。各大外送 APP 的店铺商家大部分都处于闭店状态，只有在特定的时间点才能去抢购，什么时候能买，能买到什么全凭运气。那时候是居家办公，我一有空就打开手机刷新，虽然大部分时候是无功而返，但偶尔能买到便能吃个好几天，也别管爱不爱吃了，能买到并且送到手上就已经很不错了，怎么说也能改善改善伙食。那段时间基本都是早饭不吃或者吃点面包加牛奶（看能不能买到），中午吃方便面，晚上吃鸡蛋挂面。本来我还挺爱吃面的，但这么吃下去终究还是腻了，以至于解封后到现在我都再没吃过面条。还好后来有了小区团购，物资渐渐没那么紧张了，虽然还是不能想吃啥买啥，但能买的东西还是挺多了，基本能覆盖到日常的生活，感谢我们小区的团长们！Lockdown 期间我的生活比较单调，基本就是白天居家办公，到饭点了就整点吃的，晚上打打游戏、看看书或者学点新技术。白天工作之余晒晒太阳，看看窗外的鸟雀，倒也还算惬意。那会儿经常有灰椋鸟飞到窗外的晾衣架上叽叽喳喳，对面的楼顶上也会有几只珠颈斑鸠晒太阳。也正是这个时候我对这些鸟类产生了兴趣，经过大半年在鸟吧的熏陶，现在对生活中常见的鸟也能认个七七八八了，算得上是半个“翼研丁真”了吧。 六月解封后生活又回到了正常的轨道上，总体而言有些乏善可陈。工作上和同事们更熟悉了，在新的项目中也学到了很多；生活上相比以往更规律了，最重要的还是心态上的变化，不再像刚毕业那会那么焦虑了。说到底还是对世界的认知更清晰了点，放弃了一些不切实际的幻想，学会享受每天细微的进步。心态放平后，也不再失眠了，也能看得进去一些杂书了。总的来说，我觉得这是一个不错的开始。 而对于未来的一年，我其实也有些规划。首先当然是多学些工作相关的技术栈，为之后的职业生涯打下更好的基础。另外就是把英语捡起来，虽说现在的英语看文档还行，但最近一年每天逛 reddit，还是会经常要查翻译。偶尔想看看英文的公开课，在无字幕的情况下还是有些困难，考虑到未来的发展机会，现在这点英语肯定是不够用的。最后就是重新整理下荒废已久的博客，尽量多写些内容，记录学习收获之余，还能提升下文字表达能力，感觉上了大学后，写文章的能力明显不如高中时候了。 写了这么多，看上去也都是些无关紧要的小事，不过也正是这些平淡的日常，构成了我的 2022。虽然不足挂齿，却也独此一份，我想这就是刘亮程所说的“今生今世的证据”吧。另外还是希望疫情能快点过去，世界能迎来真正的春暖花开。 最后，祝大家新年快乐！"},{"title":"Docker 安装 MySQL 手记","date":"2019-12-11T07:15:00.000Z","url":"/posts/docker-with-mysql/","tags":[["Docker","/tags/Docker/"],["MySQL","/tags/MySQL/"]],"categories":[["笔记本","/categories/%E7%AC%94%E8%AE%B0%E6%9C%AC/"]],"content":"Docker 是一个开源的应用容器引擎，基于 Go 语言编写，是目前最流行的容器解决方案。使用Docker可以将应用及依赖打包到一个可移植的容器中，然后发布到任何流行的 Windows 或 Linux 机器上运行。由于其完全使用沙盒机制，真正实现了应用程序与基础架构的分离，且与传统的虚拟机相比，Docker 的性能开销也极低。 Debug your app, not your environment. Docker简介Docker 主要有三个重要的基本概念，分别是镜像（Image）、容器（Container）和仓库（Repository）。 镜像Docker 镜像（Image）是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。 容器镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和对象一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。 仓库镜像构建完成后，可以很容易的在当前宿主机上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，通常可以选择Docker Hub，如果有私有仓库的需要的话，可以选择使用官方提供的Docker Registry服务。 安装Docker因为最近学校开设了 JSP 的实验课，需要用到数据库服务，但是安装一个完整的数据库需要很大的硬盘空间（SQL Server 需要10G，下载还贼慢，真是醉了…），而且很多功能也用不上，所以我就选择了使用轻量化的 Docker 来运行 MySQL，下面记录一下具体操作： 开启虚拟化 如果是Windows的话，需要64位机器、Windows 10的系统，然后需要至少4G的内存，具体的安装要求可以参考官网的介绍。 首先需要查看计算机有没有开启虚拟化（如果你之前安装过手游模拟器的话，大概率会提示你开启VT的，这里的虚拟化就是指这个东西~），查看方法也非常简单，打开任务管理器的性能标签页即可查看。如果没有开启的话需要进BIOS开启一下，否则Docker无法使用。 另外还需要 Hyper-V 的支持，不过 Docker 会自动帮我们开启，所以也不需要手动开启了。 安装去官网下载安装包即可，安装完成后会提示重启，方便系统添加Docker需要的组件。 配置镜像加速重启完成后你应该就能在系统托盘上看到Docker的图标了，不过因为众所周知的原因，在国内拉取Docker Hub上的镜像速度不是很理想，因此可以选择国内的加速服务，比如我这里使用了网易的： 选择Settings-Daemon-Registry mirrors，将镜像站点的链接粘贴进去即可： 配置完成后需要重新启动Docker生效。 下载并运行MySQL镜像可以去Docker Hub搜索相应的镜像，也可以在terminal中使用docker search来搜索，比如： 可以看到返回了镜像名称、镜像介绍、star数等信息，我们可以选择官方的镜像进行下载，使用如下命令： 安装完成后可以使用docker images来查看已有的镜像： 使用如下命令启动MySQL镜像： 返回一串 CONTAINER ID，代表已经启动成功。接下来就可以使用IDE或Navicat等工具连接你的数据库了。 常用指令查看已运行的容器 进入mysql容器 启动、停止、杀死容器 删除镜像 删除容器 E.N.D"},{"title":"Arch Linux安装指南","date":"2019-11-11T03:41:00.000Z","url":"/posts/installation-guide-of-arch/","tags":[["Arch Linux","/tags/Arch-Linux/"],["安装指南","/tags/%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/"]],"categories":[["笔记本","/categories/%E7%AC%94%E8%AE%B0%E6%9C%AC/"]],"content":"Note本指南已过时，建议参考最新 Wiki 或其他博主的整理。如： ArchWiki - Installation guide archlinux 简明指南 最近又换回Arch啦，听闻base软件包组已经被同名软件元包取缔（目前二者无法相互替代），所以安装过程又有变化了。鉴于自己也是经常需要找Wiki查看安装手册，也需要在安装后到处找配置相关的信息，甚感繁琐，故此写一篇比较完整的安装手记，方便日后使用。 因为内容比较多，打算先写一个大致的框架，一些简单的操作和细节补充就先跳过了，等后续有时间再慢慢填坑吧~ Preview 安装前的准备下载镜像可以去官方提供的下载处进行下载：目前提供的有BT种子和磁力链接，HTTP/HTTPS下载的话直接往下翻，找到中国的镜像站点进行下载就好了。下载完成后可以查看一下文件的散列值（另一种译名叫哈希）验证完整性，Windows上的工具也很多，如果你之前没有用过的话，也不必专门去下载了，可以使用自带的Power Shell来完成： 按照计算出的MD5值与官网给出的比对一下即可： 确定启动类型 因为不同的启动模式安装方法会有少许的不同，所以需要特别注意一下。现在大多数都是UEFI的，所以MBR就先鸽了，之后再补充吧￣へ￣ 确定启动类型的方法有很多： 可以按下win + r，在弹出的运行框中输入msinfo32，回车后会打开系统信息，在里面有一个BIOS模式，看看是不是UEFI模式（近几年比较新的电脑一般都是UEFI）。 也可以右键win徽标键，选择磁盘管理，看看你的C盘最前面有没有一个EFI分区，有的话就说明是UEFI启动模式。 准备好硬盘空间当然要准备好一块硬盘空间才能安装我们的系统了，可以使用win自带的磁盘管理，也可以使用第三方的比如分区助手之类的工具，大小看自己喜欢吧。 制作启动盘准备好一个U盘，写入镜像可以使用rufus这款软件，官网在这里。设备里选择你的U盘（记得备份数据，U盘会被清空），接着选择镜像，下面选择启动类型，UEFI就选UEFI，不是的话就选第一个。下面的可以默认： 写入方式默认就好~ 安装ing设置启动顺序这一步因为不同的电脑进入BIOS的按键不一样，所以需要大家自己百度一下。比如我的联想拯救者，BIOS键就是F2，只需要在开机时出现logo时快速点按BIOS键就可以了。进入BIOS后找到boot栏，找到你的U盘，将其调整为第一启动项（就是位置放在最上面），然后保存退出即可，不出意外的话，再次启动就可以看到arch的安装界面了，选择第一项即可进入到Arch的live安装环境。 配置系统联网Arch的安装是需要联网的，所以需要保证网络畅通。如果是自动获取ip的有线网络（比如把电脑的网线直接插到路由器上），应该什么都不用做，测试一下网络吧： 如果输出一串64 bytes from xxx (xxx): icmp_seq=xxx tti=xxx time=xxxms的东西就表示联网成功了。如果用的是WiFi的话，可以使用 接下来正常输入密码就可以使用了。 更新系统时间 查看硬盘分区这一步比较重要，建议大家一定要看清楚再格盘。可以使用lsblk来查看硬盘状态（确定刚才分好的硬盘）： 就像这样： 格式化分区当分区建立好了，这些分区都需要使用适当的文件系统进行格式化。举个例子，如果根分区在 /dev/sdX1 上并且会使用 ext4 文件系统，运行： 挂载分区如果你是单独一个Arch系统的话，则还应该分出一个新的EFI分区，如果是Win + Arch双系统的话，则需要挂载你原来的EFI分区到Arch的EFI分区上。 执行以下命令将根分区挂载到/mnt： 挂载完成后可以用lsblk命令查看有没有挂载成功。比如我的硬盘情况：sda是我的机械硬盘，sda1-3分别对应D、E、F分区，nvme0n1是我的固态硬盘，p1-p4几个分区分别对应我的EFI分区、MBR分区、Windows的C盘、Arch根分区。我没分swap分区，也没有单独分出home，大家按自己情况选择吧~（没有swap分区可能无法正常休眠） 选择软件镜像库软件仓库是软件包存储的地方，通常我们所说的软件仓库指在线软件仓库，亦即用户从互联网获取软件的地方，选择一个国内的镜像源可以加速我们的下载过程。 接下来的安装过程会用到Vim，如果没有接触过的话可以先看看一些教程，掌握基本的操作。 用Vim打开/etc/pacman.d/mirrorlist： 在normal模式下输入/可以进行查找，比如中科大的源，就可以查找ustc。normal模式下按下dd可以剪切光标下的行，按gg回到文件首，按p将行粘贴到文件最前面的位置（优先级最高）。完成后输入:wq保存退出即可。就像下面这样： 然后可以先刷新一下软件包数据库： 安装基本包使用pacstrap安装基本系统，目前base包已经被替换了，所以一些软件包需要手动安装，通常情况下有以下几个： 一个软件元包base，包含基本系统所需的依赖 额外的软件包组比如base-devel，包含常用的开发工具 一个内核，大概有以下几种： linux : 当前的稳定版本内核 linux-lts : 当前的长期支持版本内核 linux-hardened : 来自  的安全强化内核 linux-zen : 来自  的预载一定量优化的内核 大多数情况下，应该需要安装固件包 linux-firmware 一个文字编辑器，比如Vi、Vim、nano等 管理所用文件系统的用户工具，比如e2fsprogs、ntfs-3g，分别支持ext4和NTFS，如果还有其他需要，可以参考官方文档的说明自行安装 要像刚才一样联网的话，还需要这些：dhcpcd netctl iw dialog wpa_supplicant networkmanager 比如我的安装示例： 回车后就是等待安装完成了。 配置Fstab 这fstab是干嘛用的呢？（简单来说就是自动挂载） fstab文件可用于定义磁盘分区，各种其他块设备或远程文件系统应如何装入文件系统。每个文件系统在一个单独的行中描述。这些定义将在引导时动态地转换为系统挂载单元，并在系统管理器的配置重新加载时转换。 在启动需要挂载的服务之前，默认设置会自动fsck和挂载文件系统。例如，systemd会自动确保远程文件系统挂载 （如NFS或Samba）仅在网络设置完成后启动。因此，在/etc/fstab中指定的本地和远程文件系统挂载应该是开箱即用的。 生成自动挂载分区的fstab文件，执行以下命令： 可以输出一下生成的文件来检查是否正确，执行以下命令： ChrootChroot意为Change root，相当于把操纵权交给我们新安装（或已经存在）的Linux系统，执行了这步以后，我们的操作都相当于在磁盘上新装的系统中进行。如果以后我们的系统滚挂了，还需要用U盘启动，然后将根分区挂载到/mnt下，再使用chroot进系统修复，所以说U盘用完了不要扔哦~ Change root 到新安装的系统： 设置时区 顺带说一下，如果是双系统的话，Win和Arch的时间会不一样，这是因为Windows会把硬件时钟认为是localtime，而Linux会认为是UTC时间，所以会有8个小时的时差，解决方法可以改Win，也可以改Linux，这里以Win为例，修改使其将硬件时钟认为是UTC时间即可（在早于 Windows 7 的系统上发现过这样做会出现一些严重的问题：  ）。 使用注册表修改，可以将下面的命令输入到Power Shell（管理员模式）中执行，也可以新建一个后缀为.reg的注册表文件，将命令粘进去，右键执行： 本地化设置使用的语言选项： /etc/locale.gen 是一个仅包含注释文档的文本文件。指定需要的本地化类型，去掉对应行前面的注释符号（＃）就可以啦，用Vim打开就可以了，建议只选择带UTF-8的选项，比如： zh_CN.UTF-8 UTF-8 zh_HK.UTF-8 UTF-8 zh_TW.UTF-8 UTF-8 en_US.UTF-8 UTF-8 执行 locale-gen 以生成 locale 讯息： 创建 locale.conf 并提交本地化选项： 将系统 locale 设置为en_US.UTF-8，系统的 Log 就会用英文显示，这样更容易问题的判断和处理。用户可以设置自己的 locale。不推荐在此设置任何中文locale，可能会导致tty乱码。 网络设置一个你喜欢的主机名吧： 添加对应的信息到 hosts:编辑/etc/hosts文件： 在文件末添加如下内容： Root密码为你的root用户设置一个密码（虽然绝大多数时候是用不到的）： 回车之后直接输入密码就好了，屏幕上应该是啥都没有的，正常输入就完事了~ 设置sudo因为 root 用户的权力很大而且很危险，所以轻易不会用到它。 所以就有了 sudo(substitute user do) 使得系统管理员可以授权特定用户或用户组作为 root 或其他用户执行某些（或所有）命令，同时还能够对命令及其参数提供审核跟踪。 sudo 应该已经作为 base-devel 的一部分装上去了，如果没有的话也可以自己手动安装一下： sudo 的配置文件是 /etc/sudoers，不过有一个方便的指令visudo可以帮我们代理编辑它（就是先编辑一个临时文件，然后检查有没有错误， 一切 OK 后再覆盖）。 没错，其实就是用vi打开的，所以操作方式也和vi一样，找到下面这行，并将%wheel前面的注释符去掉，像下面这样： 新建普通用户配置完sudo后也可以顺带设置一下我们平常使用的普通用户： 相关参数的解释可以看我的上一篇文章，这里就不再赘述了。为你的新用户添加密码（这个密码是要经常用的）： 安装Intel-ucode（非IntelCPU可以跳过此步骤） 安装启动器启动器就是加载我们操作系统的程序，它是 BIOS 或 UEFI 启动的第一个程序。它负责使用正确的内核参数加载内核, 并根据配置文件加载初始化 RAM disk。 如果对其它的启动管理器有兴趣的话，可以去看  。 这里以Linux常用的GRUB为例： 首先安装os-prober，它可以配合Grub检测已经存在的系统，自动设置启动选项。 安装grub与efibootmgr两个包： 部署grub: 生成配置文件： 在生成配置文件的过程中，应该可以看到Windows的启动项，没看到的话需要进入Arch之后重新生成配置。 如果报 grub-probe: error: cannot find a GRUB drive for /dev/sdb1, check your device.map 的错误，并且sdb1这个地方是你的u盘，这是u盘uefi分区造成的错误，对安装没有影响，可以不用理会。 如果报 WARNING: Failed to connect to lvmetad. Falling back to device scanning 这样的错误，也可以不用理会，这是因为chroot中/run是不可用的。 如果你不放心的话，也可以检查一下刚才生成的grub.cfg配置文件中有没有Windows的启动项： 一般在文件的末尾处可以找到，如果没有找到的话需要回头看一下哪里做错了，实在不行的话可以参考这里编辑配置文件手动添加引导的分区入口。 重启先退出chroot: 现在基本的安装已经结束了，可以尝试重启一下试试能不能正常启动，如果一切顺利的话就可以再次登陆安装我们的桌面环境了，再次登陆的时候可以使用新建的普通用户。 安装后的配置显卡驱动建议先安装集显的驱动，如果有需要的话再装独显的。 如果你是Intel的集成显卡，可以装这个： 如果是ATI/AMD的话，可以参照官方文档的说明安装相应的驱动（建议选闭源的驱动，性能相对来说会更好），我这里就懒得写了（逃 一种Intel + Nvidia显卡的解决方案：在桌面环境安装完成后再尝试此选项，本来这部分应该放到后面的，但既然说到了显卡驱动，也就一并写上了~ 安装完成后重启，应该就可以看到panel栏中的manager了，右键点击它，选择设置—Optimus，Switching method选择Bbswitch，确定保存。之后切换显卡就可以用右键方便地选择了。 更多详细内容可以去看原作者的README文档，项目地址这儿。 Xorg接下来安装桌面环境需要的基础包xorg 安装桌面环境Linux下可选的桌面环境有很多，具体的可以去官方文档查看，这里就以常见的Gnome和KDE为例吧： GNOME KDE 安装桌面管理器安装好了桌面环境包以后，我们需要安装一个图形化的桌面管理器来帮助我们登录并且选择我们使用的桌面环境，KDE建议配合sddm，GNOME建议用gdm。这里以sddm为例： 安装sddm 设置开机启动sddm服务Arch用于管理系统服务的命令为systemctl，使用方法也非常简单，大致如下： 所以这里我们就执行下面命令来设置开机启动sddm： 配置网络由于我们之前使用的一直都是netctl这个自带的网络服务，而桌面环境使用的是NetworkManager这个网络服务，所以我们需要禁用netctl并启用NetworkManager： 中文字体的安装用pacman就可以方便的安装啦，选择你自己喜欢的字体吧： Google Noto Fonts 系列： noto-fonts noto-fonts-cjk noto-fonts-emoji 思源黑体：adobe-source-han-sans-otc-fonts 文泉驿：wqy-microhei wqy-zenhei 更多字体可以在这里找到。 现在就可以重启你的计算机了，再次登陆的时候应该就可以看到你安装好的桌面环境了。 其他配置其实到这里所有的安装都已经完成了，接下来主要是一些个人常用的软件、配置项的记录（不定时更新），方便以后重装的时候配置，大家也可以酌情参考~ ZSH具体内容上一篇有写，这里不再赘述。 常用的命令行工具 ffmpeg 添加ArchLinuxCN 在文件末尾添加以下内容： 在安装archlinuxcn-keyring时可能会报本地秘钥无法签署的错误，这是因为pacman上游更新了密钥环的格式，这使得本地的主密钥无法签署其他密钥。解决方法如下： 完成后再次刷新一下： yay之前一个好用的AUR助手yaourt已经停止更新了，现在建议使用yay代替它： 安装完成后就可以使用yay -S xxx来下载软件了（注意前面不要加sudo）。更新软件仓库： Chrome VS Code Visual Studio Code使用DBus传递菜单，如果全局菜单失效，可以尝试安装 libdbusmenu-glib 视频播放器这里推荐使用VLC和MPV： 截图软件 latte-dock shadowsocks命令行客户端： Usage: 使用ss-local 命令启动客户端启动客户端时使用/etc/shadowsocks/config.json配置文件: Shadowsocks的systemd服务可在/etc/shadowsocks/里调用不同的conf-file.json 例如，在/etc/shadowsocks/中创建了foo.json配置文件，那么执行以下语句就可以调用该配置： 启动shadowsocks： 开机自启动shadowsocks： 图形客户端： 网易云音乐 输入法可用的有Ibus和Fcitx，这里以Fcitx为例： 然后在~/.xprofile文件（没有就新建一个）中加入以下几行： 重启后应该就能使用输入法了~ blender steam Minecraft E.N.D至此Arch Linux已经全部安装完成了，赶紧开始你的Arch之旅吧~ Just Enjoy It 参考文章Installation guideArch Wiki以官方Wiki的方式安装ArchLinux给 GNU/Linux 萌新的 Arch Linux 安装指南 rev.BGnuPG-2.1 与 pacman 密钥环"},{"title":"scp下载服务器文件","date":"2019-11-02T10:46:00.000Z","url":"/posts/usage-of-scp/","tags":[["scp","/tags/scp/"],["服务器","/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"]],"categories":[["笔记本","/categories/%E7%AC%94%E8%AE%B0%E6%9C%AC/"]],"content":"Note更推荐使用 rsync 替代 scp。 一个平常的晚上，突然心血来潮想试试 Blender 2.80 的 eevee，遂去官网看了下，没想到正式版都出来了，但下载安装包的时候却出现了极其蛋疼的问题： 这显然是难以忍受的，正好我有一台洛杉矶的服务器，于是便打算利用它来下载，然后传回本地电脑上。相关的工具也很多，比如 xftp、scp、ftp 等，今天就记录一下 scp 的使用方法。 什么是 scpscp 是 secure copy 的缩写, scp 是 linux 系统下基于 ssh 登陆进行安全的远程文件拷贝命令。和它类似的命令有 cp，不过 cp 只是在本机进行拷贝不能跨服务器，而且 scp 传输是加密的，可能会稍微影响一下速度。 常用命令 若ssh端口不是默认的22，可以加上-P port参数（注意-P为大写） 上传本地文件到服务器 从服务器上下载文件 从服务器下载整个目录 上传目录到服务器 E.N.D小忍姐姐真是太帅了~ さようなら"},{"title":"WSL安装记","date":"2019-10-21T10:59:00.000Z","url":"/posts/install-arch-on-windows/","tags":[["WSL","/tags/WSL/"],["Arch Linux","/tags/Arch-Linux/"]],"categories":[["笔记本","/categories/%E7%AC%94%E8%AE%B0%E6%9C%AC/"]],"content":"缘起Windows一直以来的一大痛点就是没有一个好用的命令行环境。此前虽然一直有听说 WSL ，但当时我还是用的多系统，所以并没有太多关注。在经过Windows -&gt; Ubuntu -&gt; Arch Linux -&gt; 黑苹果 -&gt; Windows的轮回后，我终于又用回了Windows 10(真香)。而作为 Linux 最好的发行版(雾)，怎么能没有一个好用的命令行环境呢？！虽然一直有折腾一下的想法，但平时课实在是太多了啊(其实是我太懒了(o´ω`o)ﾉ)于是就这样一直拖到了现在，今天正好有两节实验课比较水，完成任务后就开始了捣鼓，顺便记录一下过程(氵博客)。 关于WSLWindows Subsystem for Linux（简称WSL）是一个在Windows 10上能够运行原生Linux二进制可执行文件（ELF格式）的兼容层。相较于虚拟机更为轻巧方便，安装也比较简单，开启WSL后在微软商店中直接搜索即可安装。 安装前的配置启用WSL控制面板-&gt;程序和功能-&gt;启用或关闭 window 功能-&gt;勾选“适用于 Linux 的 Windows 子系统”，之后重启系统。 打开开发者模式设置-&gt;更新与安全-&gt;开发者选项-&gt;开发者模式 安装所需要的发行版在微软商店搜索你需要安装的发行版，点击安装即可。我这里用的是Arch Linux，官方商店中并没有提供镜像，有以下两种方法解决： 使用非官方的安装包 arch可以在github找到非官方的安装包，安装过程非常简单，下载完成后运行安装程序即可，仓库地址在这儿 安装微软商店中的Ubuntu，按照Arch Wiki上的操作将内核换成Arch 这里步骤比较多，我也并没有用这种方法，所以就懒得写了，地址我放在这儿了，大家有兴趣的话自己去看吧（逃~ 安装完成后的配置 第一次安装程序时可能会报错，提示没有合法的数字签名。运行以下两条命令即可： 安装VIM 配置国内的 mirrorlist 源 这里以清华的源为例，删掉开头的注释符”#”使其生效（之前在实体机上安装的时候这些源都是未被注释的，即都生效，优先选择最上面的源，所以只需要将你需要的源放到第一个就行了，WSL这边似乎有些不一样，如果有知道的大佬可以解答一下~） 保存关闭后使用下面的命令刷新软件列表并更新软件 添加新的普通用户 注意：我之后的操作步骤都是在root身份下完成的，貌似windows terminal在非root环境下会有bug，反正我是用不了Tab补全，Ctrl +C清屏等功能的，不知道后续会不会修复，大家酌情选择吧~ 使用命令： username 替换为你的用户名 各参数的含义： -m：在创建时同时在/home目录下创建一个与用户名同名的文件夹，这个目录就是你的家目录。这个神奇的目录将会用于存放你所有的个人资料、配置文件等所有跟系统本身无关的资料。这种设定带来了诸多优点： 只要家目录不变，你重装系统后只需要重新安装一下软件包（它们一般不存放在家目录），然后所有的配置都会从家目录中读取，完全不用重新设置软件。 你可以在家目录不变的情况下更换你的发行版而不用重新配置你的环境。 切换用户后所有的设置会从新的用户的家目录中读取，将不同用户的资料与软件设置等完全隔离。 有些著名的配置文件比如vim的配置文件~/.vimrc，只要根据自己的使用习惯配置一次， 在另一个Linux系统下（例如你的服务器）把这个文件复制到家目录下，就可以完全恢复你的配置。 -G wheel：-G代表把用户加入一个组，wheel就是组名，加入这个组是为了方便使用sudo命令。 为root和新用户设置密码 配置sudo 找到 # %wheel ALL=(ALL)ALL 这一行，取消前面的注释符“#”。 这里的%wheel就是代表wheel组，意味着wheel组中的所有用户都可以使用sudo命令。 root切换到普通用户可以使用 su - username 命令 安装配置zsh虽然一般情况下默认的bash已经够用了，但是zsh更为强大高效，如果没有用过的话强烈推荐体验一下~ 安装zsh 主题首先了解几个重要的文件： zsh的配置文件 ： ~/.zshrc 主题的存放路径 ： ~/.oh-my-zsh/themes 插件的存放路径： ~/.oh-my-zsh/plugins 更改主题只需要在.zshrc文件中更改即可:更改完成后要使其立即生效只需执行： 配色根据自己用的terminal来改吧，我这里用的是windows terminal，配置文件有需要的话可以参考： 更多配色可以去这里找，更多关于Windows Terminal的配置项可以阅读官方文档 插件下面介绍几个我正在用的zsh插件： zsh-autosuggestions自动补全插件，作用是记录下你曾经输入过的命令，之后再次输入时就会有类似IDE自动补全的效果，非常好用，安装方法可以直接用git clone： zsh-syntax-highlighting语法高亮插件，能自动识别输入的命令是否有效，有效会显示成绿色，无效为红色： 安装完成后修改一下.zshrc文件，使插件生效： 同样的，保存退出后使配置文件生效： E.N.D到这里差不多基本的配置就完成了，今天就先写到这儿吧，有什么问题欢迎留言，最后放一张成果图吧~ 参考文章ArchLinux安装后的必须配置与图形界面安装教程win10 arch子系统 docker"},{"title":"关于","date":"2022-12-30T09:09:17.000Z","url":"/about/index.html","categories":[[" ",""]],"content":"关于我 九五后，出生在苏北平原的一个小地方 现为魔都普通上班族，Java 后端工程师 大学的时候接触过一些设计、视频剪辑和 3D 渲染相关的知识，有一些低创作品 闲暇时喜欢看书，严肃文学和通俗文学都看，后者更多一些 二刺螈，喜欢看冻鳗，偶尔会玩玩 GalGame 技术力菜，努力学习中… 关于本站如你所见，这是一个独立博客网站，内容基本是一些学习笔记、生活琐事之类。最初的域名是 mashiro.vip，后来换成了 akaneym.com，也即“茜の夢”的罗马音。来源是一部扳机社的动画——《SSSS.GRIDMAN》，虽然六花也很可爱，但我果然还是更喜欢新条茜。建站其实也有好几年了，但一直没怎么写，期间换过动态、静态的各种架构和主题。其中的细节便不再赘叙了吧，总之最后还是选择了最适合我的静态站点，也许是老了吧，不再像大学时候那么爱折腾了。目前博客使用的是 Hexo &amp; Giscus，主题是 Cards。依托于 GitHub Discussion 和 CloudFlare CDN，配合免费的 GitHub Actions，基本上除了内容其他都不用考虑了，不得不说资本主义的羊毛还真是香（逃。 我在玩 Steam: rimwindy 原神: UID#100863000 联系我 GitHub Twitter Bilibili Email 友链申请欢迎交换友链~请在评论区留言告知你的: "},{"title":"friends","date":"2022-11-13T08:58:37.000Z","url":"/friends/index.html","categories":[[" ",""]]},{"title":"search","date":"2022-11-13T08:41:51.000Z","url":"/search/index.html","categories":[[" ",""]]},{"title":"tags","date":"2022-11-13T08:48:57.000Z","url":"/tags/index.html","categories":[[" ",""]]}]